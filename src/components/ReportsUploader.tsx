import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import Icon from '@/components/ui/icon';
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import ProcessReports from './ProcessReports';

interface ReportsUploaderProps {
  userId: number;
}

export default function ReportsUploader({ userId }: ReportsUploaderProps) {
  const [file, setFile] = useState<File | null>(null);
  const [uploading, setUploading] = useState(false);
  const [result, setResult] = useState<any>(null);
  const { toast } = useToast();

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
      setResult(null);
    }
  };

  const handleUpload = async () => {
    if (!file) {
      toast({ title: '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª', variant: 'destructive' });
      return;
    }

    setUploading(true);

    try {
      const isExcel = file.name.endsWith('.xlsx') || file.name.endsWith('.xls');
      
      const reader = new FileReader();
      reader.onload = async (event) => {
        const result = event.target?.result;
        let base64Content: string;
        
        if (isExcel) {
          const arrayBuffer = result as ArrayBuffer;
          const bytes = new Uint8Array(arrayBuffer);
          let binary = '';
          for (let i = 0; i < bytes.length; i++) {
            binary += String.fromCharCode(bytes[i]);
          }
          base64Content = btoa(binary);
        } else {
          const content = result as string;
          base64Content = btoa(unescape(encodeURIComponent(content)));
        }

        const response = await fetch('https://functions.poehali.dev/be12d7b5-90f6-4a13-992e-204cd8f0a264', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            file_content: base64Content,
            file_type: isExcel ? 'xlsx' : 'csv',
            file_name: file.name,
            uploaded_by: userId
          })
        });

        const data = await response.json();

        if (response.ok && data.success) {
          setResult(data);
          toast({
            title: '‚úÖ –§–∞–π–ª —Ä–∞–∑–±–∏—Ç –ø–æ –∞—Ä—Ç–∏—Å—Ç–∞–º',
            description: `–°–æ–∑–¥–∞–Ω–æ ${data.artist_files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–æ–≤`
          });
        } else {
          toast({
            title: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
            description: data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            variant: 'destructive'
          });
        }

        setUploading(false);
      };

      if (isExcel) {
        reader.readAsArrayBuffer(file);
      } else {
        reader.readAsText(file);
      }
    } catch (error) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª',
        variant: 'destructive'
      });
      setUploading(false);
    }
  };

  return (
    <Card className="bg-gradient-to-br from-yellow-900/40 to-yellow-800/20 border-yellow-700/30">
      <CardHeader>
        <CardTitle className="text-yellow-100 flex items-center gap-2">
          <Icon name="Upload" size={24} className="text-yellow-400" />
          –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –∞—Ä—Ç–∏—Å—Ç–æ–≤
        </CardTitle>
        <CardDescription className="text-yellow-300/70">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å—Ç—Ä–∏–º–∏–Ω–≥—É. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ç–∏—Å—Ç–∞–º.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-2">
          <Label htmlFor="file-upload" className="text-yellow-100">
            –í—ã–±–µ—Ä–∏—Ç–µ CSV –∏–ª–∏ XLSX —Ñ–∞–π–ª
          </Label>
          <div className="flex gap-2">
            <Input
              id="file-upload"
              type="file"
              accept=".csv,.xlsx,.xls"
              onChange={handleFileChange}
              className="bg-black/20 border-yellow-700/30 text-yellow-100"
            />
            <Button
              onClick={handleUpload}
              disabled={!file || uploading}
              className="bg-yellow-600 hover:bg-yellow-700 text-white"
            >
              {uploading ? (
                <>
                  <Icon name="Loader2" size={18} className="mr-2 animate-spin" />
                  –ó–∞–≥—Ä—É–∑–∫–∞...
                </>
              ) : (
                <>
                  <Icon name="Upload" size={18} className="mr-2" />
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å
                </>
              )}
            </Button>
          </div>
          {file && (
            <p className="text-sm text-yellow-300/70">
              –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file.name} ({(file.size / 1024).toFixed(2)} KB)
            </p>
          )}
        </div>

        {result && (
          <div className="space-y-4">
            <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
              <h4 className="text-green-400 font-semibold mb-2 flex items-center gap-2">
                <Icon name="CheckCircle" size={20} />
                –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
              </h4>
              <div className="space-y-1 text-sm text-green-300">
                <p>‚úÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <strong>{result.total_rows}</strong></p>
                <p>üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: <strong>{result.artist_files.length}</strong></p>
                <div className="mt-2">
                  <p className="text-yellow-300 mb-1">–ê—Ä—Ç–∏—Å—Ç—ã:</p>
                  <ul className="list-disc list-inside text-yellow-200 text-xs">
                    {result.artist_files.map((af: any, idx: number) => (
                      <li key={idx}>{af.artist_full_name} ({af.rows_count} –∑–∞–ø–∏—Å–µ–π)</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
            <ProcessReports uploadedReportId={result.uploaded_report_id} />
          </div>
        )}

        <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
          <h4 className="text-blue-400 font-semibold mb-2 flex items-center gap-2">
            <Icon name="Info" size={20} />
            –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞?
          </h4>
          <ol className="text-sm text-blue-300 space-y-1 list-decimal list-inside">
            <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—â–∏–π CSV/XLSX —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –∞—Ä—Ç–∏—Å—Ç–∞–º–∏</li>
            <li>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ–±—å—ë—Ç —Ñ–∞–π–ª –ø–æ –∞—Ä—Ç–∏—Å—Ç–∞–º (–ø–æ username –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∞–ª—å–±–æ–º–∞)</li>
            <li>–î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–ø—Ä–∏–≤—è–∑–∫–∞ –≤—Ä—É—á–Ω—É—é)</li>
            <li>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ % –≤—ã—á–µ—Ç–∞ - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á—Ç–µ—Ç—Å—è –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –≤ PDF</li>
            <li>–ù–∞–∂–º–∏—Ç–µ "–≠–∫—Å–ø–æ—Ä—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" - –æ—Ç—á—ë—Ç —Å–∫–∞—á–∞–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞—Ä—Ç–∏—Å—Ç—É –≤ –õ–ö</li>
          </ol>
        </div>
      </CardContent>
    </Card>
  );
}